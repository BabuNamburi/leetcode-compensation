I had this question in a recent hiring round. I think it is over now. I tried greedy but it didn't worked. Though of binary search but couldn't formulate.
Can someone help. Thanks!
This was my greedy approach
#include<bits/stdc++.h>
using namespace std;

int maximumServerRating(vector<int>& power, vector<int>& frequency, int M) {
    int N = power.size();
    set<int> uniqueFrequencies;
    int Total_Power = 0;
    int Versatility_Count = 0;

    vector<int> indices(N);
    for (int i = 0; i < N; i++) {
        indices[i] = i;
    }
    sort(indices.begin(), indices.end(), [&](int a, int b) {
        return power[b] < power[a];
    });

    for (int i = 0; i < M; i++) {
        int index = indices[i];
        Total_Power += power[index];

        int freq = frequency[index];
        uniqueFrequencies.insert(freq);
    }
    Versatility_Count=uniqueFrequencies.size();
    int Server_Rating = Total_Power + Versatility_Count * Versatility_Count;
    cout<<Total_Power<<' '<<Versatility_Count<<"----";
    return Server_Rating;
}

int main() {

    ios::sync_with_stdio(0);
    cin.tie(0);
    int T;
    cin >> T;
    for(int t_i = 0; t_i < T; t_i++)
    {
        int N;
        cin >> N;
        vector<int> P(N);
        for(int i_P = 0; i_P < N; i_P++)
        {
         cin >> P[i_P];
        }
        vector<int> F(N);
        for(int i_F = 0; i_F < N; i_F++)
        {
         cin >> F[i_F];
        }
        int M;
        cin >> M;

        long long out_;
        out_ = maximumServerRating(P, F, M);
        cout << out_;
        cout << "\n";
    }
}